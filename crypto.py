import numpy as np
def parseflag(s):
	return ["0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ".index(c) for c in s[0:31]]
def unparseflag(ar):
	return ''.join(["0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"[i] for i in ar]) + "="
#we have a 'block cipher' modulo 36 with blocks sized 31
#this is mostly inspired by AES (but not the same) (but our opponents don't know how this works, so it should be fine)
def matvec(ar, mat):
	return np.dot(ar, mat) % 36
	#res = [0] * 31
	#for i in range(31):
	#	for j in range(31):
	#		res[i] += mat[i][j] * ar[j]
	#return [a % 36 for a in res]

def subbytes(ar, sbox):
	return [sbox[i] for i in ar]

def addkey(ar, key):
	#return [(a + b) % 36 for a,b in zip(ar, key)]
	return (ar + key) % 36

#mat = invertible random 31x31 matrix modulo 36
#sbox = random permutation on 36 elements
#key = 31 random numbers below 36
#the key might actually be renundant because of the matrix multiplication?

mat = np.array([[24, 1, 17, 15, 28, 9, 2, 29, 35, 25, 28, 10, 15, 29, 1, 11, 12, 25, 4, 30, 29, 31, 3, 5, 33, 18, 32, 9, 32, 15, 9], [5, 27, 15, 6, 5, 3, 27, 32, 25, 13, 32, 5, 26, 26, 14, 6, 11, 1, 30, 11, 3, 21, 9, 12, 6, 1, 13, 15, 17, 1, 25], [16, 26, 33, 9, 31, 22, 10, 1, 30, 10, 14, 27, 14, 17, 17, 6, 4, 32, 4, 20, 6, 20, 9, 31, 32, 23, 2, 7, 27, 28, 0], [8, 4, 31, 16, 33, 24, 24, 10, 22, 20, 4, 15, 27, 10, 10, 2, 19, 2, 16, 4, 12, 22, 24, 19, 3, 19, 27, 24, 30, 14, 34], [33, 7, 24, 16, 27, 16, 15, 17, 15, 0, 23, 26, 31, 22, 13, 1, 20, 29, 16, 2, 18, 16, 25, 27, 30, 22, 35, 24, 28, 13, 10], [9, 30, 4, 4, 10, 15, 24, 31, 25, 6, 10, 12, 30, 16, 7, 24, 22, 13, 16, 9, 32, 5, 6, 34, 3, 11, 15, 19, 23, 8, 18], [20, 12, 12, 2, 7, 31, 21, 0, 27, 21, 17, 16, 35, 22, 26, 22, 6, 2, 2, 34, 21, 4, 20, 27, 31, 8, 21, 6, 3, 7, 13], [22, 26, 3, 15, 30, 4, 12, 19, 19, 35, 24, 15, 15, 9, 9, 30, 22, 16, 24, 13, 17, 26, 24, 32, 25, 30, 5, 7, 26, 26, 7], [7, 15, 8, 14, 6, 26, 16, 13, 8, 28, 31, 16, 16, 5, 18, 25, 29, 9, 23, 33, 7, 12, 12, 6, 6, 23, 16, 14, 9, 32, 35], [29, 31, 29, 26, 5, 11, 14, 24, 25, 20, 28, 33, 18, 12, 24, 8, 15, 15, 31, 20, 7, 3, 32, 14, 12, 22, 5, 2, 6, 12, 17], [23, 6, 32, 18, 15, 5, 29, 34, 31, 27, 34, 5, 10, 4, 3, 35, 13, 3, 18, 22, 17, 6, 0, 1, 23, 28, 3, 20, 2, 16, 31], [23, 34, 14, 10, 33, 10, 5, 3, 22, 24, 21, 10, 10, 3, 23, 9, 11, 1, 15, 33, 4, 17, 23, 4, 16, 30, 12, 14, 22, 20, 8], [8, 20, 13, 14, 30, 31, 21, 20, 9, 12, 9, 10, 19, 16, 20, 35, 20, 28, 5, 33, 25, 21, 26, 22, 22, 5, 23, 20, 20, 2, 24], [11, 5, 18, 34, 33, 28, 35, 25, 28, 21, 15, 29, 26, 2, 11, 34, 2, 32, 18, 7, 8, 32, 16, 14, 12, 19, 26, 7, 13, 25, 13], [17, 9, 12, 13, 25, 7, 3, 35, 16, 35, 35, 26, 10, 16, 28, 23, 34, 11, 31, 17, 13, 34, 26, 33, 24, 4, 14, 10, 31, 29, 9], [28, 16, 5, 12, 30, 11, 18, 34, 26, 10, 11, 11, 33, 15, 14, 24, 13, 8, 12, 18, 16, 0, 10, 26, 12, 26, 27, 23, 8, 4, 30], [12, 5, 6, 33, 12, 22, 13, 6, 3, 19, 7, 30, 6, 5, 27, 5, 24, 1, 17, 7, 23, 22, 31, 22, 27, 31, 31, 27, 13, 1, 0], [28, 21, 19, 13, 15, 14, 14, 20, 8, 26, 3, 24, 14, 20, 0, 33, 21, 35, 28, 2, 16, 22, 34, 0, 1, 13, 1, 22, 28, 4, 31], [1, 26, 32, 16, 8, 15, 15, 31, 26, 15, 2, 14, 5, 3, 34, 7, 33, 16, 21, 14, 1, 0, 33, 16, 34, 7, 29, 18, 32, 11, 2], [33, 7, 21, 21, 6, 15, 27, 20, 34, 30, 24, 27, 15, 25, 7, 3, 21, 2, 20, 27, 8, 18, 29, 23, 4, 10, 6, 35, 6, 16, 1], [31, 18, 30, 11, 20, 21, 18, 19, 21, 8, 17, 17, 16, 35, 7, 1, 10, 15, 9, 22, 29, 21, 2, 6, 11, 20, 11, 19, 20, 23, 31], [22, 2, 28, 25, 27, 20, 4, 33, 13, 17, 25, 21, 10, 18, 21, 28, 5, 0, 16, 5, 13, 20, 5, 12, 7, 1, 20, 8, 32, 21, 11], [11, 22, 25, 29, 9, 32, 17, 31, 25, 16, 34, 3, 3, 24, 18, 25, 8, 22, 17, 1, 10, 20, 5, 4, 1, 31, 8, 7, 6, 3, 11], [4, 10, 8, 3, 8, 34, 1, 25, 33, 9, 35, 15, 7, 33, 18, 22, 35, 8, 24, 21, 22, 7, 27, 7, 32, 15, 0, 25, 3, 2, 9], [5, 23, 33, 8, 10, 24, 35, 15, 15, 1, 2, 6, 34, 18, 9, 33, 15, 31, 17, 2, 8, 2, 28, 26, 9, 21, 34, 18, 31, 24, 20], [6, 19, 34, 35, 19, 19, 0, 18, 5, 12, 28, 29, 7, 30, 6, 19, 6, 5, 32, 11, 16, 24, 16, 4, 5, 31, 9, 31, 25, 23, 22], [1, 0, 24, 7, 16, 19, 25, 5, 30, 9, 26, 18, 9, 22, 26, 10, 24, 2, 18, 13, 7, 22, 35, 3, 22, 20, 7, 3, 23, 32, 16], [16, 30, 7, 9, 7, 8, 8, 4, 6, 25, 17, 7, 25, 1, 21, 0, 5, 1, 17, 16, 30, 28, 10, 19, 30, 35, 11, 3, 35, 20, 3], [31, 33, 33, 29, 3, 11, 27, 29, 33, 10, 19, 12, 35, 15, 20, 35, 27, 6, 1, 27, 6, 7, 6, 0, 34, 16, 5, 18, 2, 11, 8], [0, 12, 22, 24, 26, 27, 10, 25, 15, 23, 2, 20, 15, 33, 28, 13, 26, 34, 18, 34, 34, 3, 33, 34, 12, 11, 14, 3, 5, 8, 4], [15, 31, 2, 24, 5, 22, 33, 5, 22, 34, 23, 13, 34, 10, 1, 7, 15, 27, 32, 19, 35, 10, 26, 34, 19, 35, 29, 28, 30, 14, 23]])
sbox = np.array([18, 13, 16, 7, 35, 22, 23, 33, 30, 1, 3, 6, 34, 20, 0, 26, 28, 5, 21, 9, 32, 11, 14, 10, 29, 31, 17, 8, 2, 25, 27, 4, 15, 12, 19, 24])
key = np.array([12, 27, 33, 29, 24, 15, 34, 31, 0, 28, 3, 16, 20, 0, 23, 7, 3, 34, 19, 14, 9, 34, 32, 5, 22, 7, 4, 22, 0, 30, 22])
imat = np.array([[28, 26, 0, 24, 14, 26, 28, 0, 12, 7, 34, 25, 3, 3, 19, 14, 33, 10, 10, 23, 20, 35, 34, 26, 24, 19, 18, 22, 7, 12, 23], [22, 13, 4, 1, 16, 15, 33, 10, 1, 1, 18, 19, 32, 2, 17, 31, 20, 0, 29, 1, 22, 28, 20, 18, 35, 11, 29, 33, 31, 5, 21], [22, 15, 18, 22, 29, 22, 32, 15, 14, 18, 25, 26, 14, 15, 18, 33, 4, 29, 9, 17, 9, 3, 17, 5, 35, 0, 33, 35, 13, 34, 17], [24, 16, 3, 26, 26, 11, 26, 24, 35, 6, 2, 27, 6, 11, 19, 7, 13, 26, 15, 24, 27, 2, 25, 2, 15, 16, 10, 6, 28, 11, 11], [2, 1, 11, 35, 0, 22, 0, 6, 8, 26, 1, 9, 21, 16, 19, 25, 27, 12, 8, 3, 30, 12, 14, 2, 15, 20, 3, 32, 29, 10, 22], [22, 6, 5, 0, 32, 3, 6, 17, 4, 25, 26, 14, 5, 29, 29, 13, 26, 31, 18, 23, 30, 27, 35, 9, 1, 34, 3, 27, 10, 4, 32], [27, 27, 14, 5, 7, 6, 33, 31, 23, 19, 22, 34, 19, 24, 26, 22, 4, 25, 21, 9, 22, 29, 3, 9, 4, 19, 1, 25, 0, 11, 10], [33, 32, 18, 24, 32, 26, 21, 31, 3, 10, 29, 21, 21, 28, 20, 11, 34, 26, 7, 7, 33, 1, 19, 22, 30, 24, 10, 26, 16, 32, 9], [5, 11, 16, 25, 14, 10, 16, 16, 27, 30, 6, 9, 17, 7, 28, 3, 10, 23, 15, 15, 3, 4, 20, 35, 3, 3, 14, 28, 6, 34, 28], [7, 17, 35, 30, 0, 0, 11, 35, 11, 8, 24, 15, 31, 11, 7, 34, 19, 26, 27, 30, 29, 1, 8, 29, 0, 11, 0, 11, 26, 30, 23], [15, 18, 6, 11, 0, 29, 12, 35, 13, 4, 31, 16, 31, 30, 4, 27, 31, 6, 20, 31, 3, 33, 31, 5, 3, 20, 34, 21, 27, 26, 20], [28, 12, 28, 4, 29, 4, 15, 33, 19, 32, 3, 28, 18, 26, 6, 5, 30, 0, 18, 13, 16, 33, 21, 34, 12, 34, 30, 34, 20, 4, 3], [32, 3, 12, 16, 31, 0, 26, 30, 8, 21, 28, 4, 20, 26, 13, 5, 6, 30, 30, 19, 0, 22, 6, 33, 13, 18, 28, 16, 13, 16, 1], [19, 27, 2, 25, 15, 0, 30, 14, 31, 23, 2, 9, 22, 10, 30, 8, 16, 33, 14, 10, 18, 12, 6, 14, 20, 16, 27, 16, 27, 9, 31], [10, 19, 32, 17, 10, 29, 25, 18, 22, 33, 30, 33, 4, 18, 9, 7, 30, 3, 12, 30, 22, 30, 0, 13, 9, 31, 26, 10, 8, 23, 14], [10, 33, 34, 34, 5, 34, 23, 4, 18, 5, 9, 8, 18, 26, 3, 24, 34, 18, 17, 23, 16, 26, 35, 24, 24, 30, 7, 24, 18, 10, 33], [25, 3, 26, 0, 5, 0, 28, 33, 31, 23, 34, 9, 7, 5, 2, 13, 11, 8, 16, 6, 35, 16, 17, 17, 6, 27, 28, 35, 32, 21, 26], [12, 30, 9, 8, 25, 25, 21, 18, 0, 0, 21, 11, 6, 18, 12, 22, 29, 4, 3, 0, 2, 0, 18, 11, 15, 0, 13, 12, 30, 31, 3], [11, 27, 3, 1, 11, 32, 13, 14, 27, 32, 35, 24, 22, 22, 23, 19, 9, 34, 35, 7, 31, 14, 27, 24, 22, 33, 35, 9, 18, 23, 30], [10, 22, 34, 9, 24, 3, 15, 33, 23, 21, 17, 33, 29, 10, 33, 14, 34, 7, 27, 4, 13, 24, 25, 34, 22, 27, 34, 0, 26, 1, 15], [26, 33, 1, 17, 29, 17, 11, 25, 13, 20, 2, 1, 16, 11, 4, 35, 18, 9, 27, 17, 32, 29, 10, 7, 7, 6, 32, 2, 16, 6, 5], [19, 7, 18, 34, 18, 6, 31, 33, 22, 0, 23, 30, 18, 33, 20, 0, 35, 31, 24, 23, 16, 22, 10, 30, 24, 31, 23, 33, 32, 5, 27], [35, 0, 35, 7, 28, 0, 30, 4, 15, 15, 18, 11, 33, 9, 30, 24, 29, 33, 14, 30, 17, 10, 13, 33, 26, 13, 23, 23, 0, 32, 17], [35, 6, 11, 31, 26, 29, 19, 21, 32, 14, 1, 21, 22, 14, 23, 20, 6, 29, 17, 12, 2, 18, 33, 12, 7, 28, 13, 12, 25, 26, 25], [25, 28, 3, 5, 32, 15, 32, 23, 14, 19, 34, 8, 12, 23, 14, 34, 13, 35, 33, 12, 33, 7, 3, 18, 24, 22, 33, 10, 13, 3, 26], [27, 9, 29, 21, 8, 15, 21, 24, 4, 31, 9, 22, 30, 7, 33, 5, 14, 26, 28, 13, 3, 20, 35, 12, 17, 6, 29, 32, 29, 20, 22], [20, 9, 2, 9, 20, 33, 1, 23, 6, 26, 7, 25, 30, 26, 4, 12, 25, 25, 23, 7, 28, 17, 32, 17, 7, 15, 13, 8, 32, 30, 0], [9, 15, 33, 9, 23, 23, 18, 8, 0, 32, 2, 3, 27, 11, 18, 21, 17, 32, 0, 22, 21, 17, 25, 28, 33, 8, 28, 26, 12, 14, 2], [6, 26, 21, 33, 34, 21, 35, 22, 13, 4, 8, 10, 4, 33, 21, 26, 34, 13, 26, 33, 8, 22, 4, 21, 13, 26, 28, 10, 23, 31, 23], [12, 28, 8, 21, 7, 18, 22, 23, 20, 25, 21, 2, 11, 19, 27, 15, 16, 0, 12, 32, 30, 15, 10, 30, 23, 13, 12, 14, 6, 22, 26], [32, 29, 25, 12, 24, 35, 11, 5, 22, 9, 15, 8, 31, 15, 23, 13, 35, 20, 35, 7, 4, 0, 33, 3, 18, 1, 26, 6, 30, 21, 19]])
isbox = np.array([14, 9, 28, 10, 31, 17, 11, 3, 27, 19, 23, 21, 33, 1, 22, 32, 2, 26, 0, 34, 13, 18, 5, 6, 35, 29, 15, 30, 16, 24, 8, 25, 20, 7, 12, 4])
ikey = np.array([24, 9, 3, 7, 12, 21, 2, 5, 0, 8, 33, 20, 16, 0, 13, 29, 33, 2, 17, 22, 27, 2, 4, 31, 14, 29, 32, 14, 0, 6, 14])
def encryptar(ar):
	ar = np.array(ar)
	for i in range(15):
		ar = matvec(ar, mat)
		ar = subbytes(ar, sbox)
		ar = addkey(ar, key)
	return ar.tolist()
def decryptar(ar):
	ar = np.array(ar)
	for i in range(15):
		ar = addkey(ar, ikey)
		ar = subbytes(ar, isbox)
		ar = matvec(ar, imat)
	return ar.tolist()
def encryptflag(s):
	return unparseflag(encryptar(parseflag(s)))
def decryptflag(s):
	return unparseflag(decryptar(parseflag(s)))
